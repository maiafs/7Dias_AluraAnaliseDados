# -*- coding: utf-8 -*-
"""Alura Dia 6 - Análises Enriquecidas.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1u5wKvBHl04FQ4XGEPdzMqvE5bUYuKhIp
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import matplotlib.ticker as ticker

dados_2010_1 = pd.read_csv('https://github.com/FranciscoFoz/7_Days_of_Code_Alura-Python-Pandas/blob/main/Dia_1-Importando_dados/Datasets/dados_emprestimos/emprestimos-20101.csv?raw=true')
dados_2010_2 = pd.read_csv('https://github.com/FranciscoFoz/7_Days_of_Code_Alura-Python-Pandas/blob/main/Dia_1-Importando_dados/Datasets/dados_emprestimos/emprestimos-20102.csv?raw=true')
dados_2011_1 = pd.read_csv('https://github.com/FranciscoFoz/7_Days_of_Code_Alura-Python-Pandas/blob/main/Dia_1-Importando_dados/Datasets/dados_emprestimos/emprestimos-20111.csv?raw=true')
dados_2011_2 = pd.read_csv('https://github.com/FranciscoFoz/7_Days_of_Code_Alura-Python-Pandas/blob/main/Dia_1-Importando_dados/Datasets/dados_emprestimos/emprestimos-20112.csv?raw=true')
dados_2012_1 = pd.read_csv('https://github.com/FranciscoFoz/7_Days_of_Code_Alura-Python-Pandas/blob/main/Dia_1-Importando_dados/Datasets/dados_emprestimos/emprestimos-20121.csv?raw=true')
dados_2012_2 = pd.read_csv('https://github.com/FranciscoFoz/7_Days_of_Code_Alura-Python-Pandas/blob/main/Dia_1-Importando_dados/Datasets/dados_emprestimos/emprestimos-20122.csv?raw=true')
dados_2013_1 = pd.read_csv('https://github.com/FranciscoFoz/7_Days_of_Code_Alura-Python-Pandas/blob/main/Dia_1-Importando_dados/Datasets/dados_emprestimos/emprestimos-20131.csv?raw=true')
dados_2013_2 = pd.read_csv('https://github.com/FranciscoFoz/7_Days_of_Code_Alura-Python-Pandas/blob/main/Dia_1-Importando_dados/Datasets/dados_emprestimos/emprestimos-20132.csv?raw=true')
dados_2014_1 = pd.read_csv('https://github.com/FranciscoFoz/7_Days_of_Code_Alura-Python-Pandas/blob/main/Dia_1-Importando_dados/Datasets/dados_emprestimos/emprestimos-20141.csv?raw=true')
dados_2014_2 = pd.read_csv('https://github.com/FranciscoFoz/7_Days_of_Code_Alura-Python-Pandas/blob/main/Dia_1-Importando_dados/Datasets/dados_emprestimos/emprestimos-20142.csv?raw=true')
dados_2015_1 = pd.read_csv('https://github.com/FranciscoFoz/7_Days_of_Code_Alura-Python-Pandas/blob/main/Dia_1-Importando_dados/Datasets/dados_emprestimos/emprestimos-20151.csv?raw=true')
dados_2015_2 = pd.read_csv('https://github.com/FranciscoFoz/7_Days_of_Code_Alura-Python-Pandas/blob/main/Dia_1-Importando_dados/Datasets/dados_emprestimos/emprestimos-20152.csv?raw=true')
dados_2016_1 = pd.read_csv('https://github.com/FranciscoFoz/7_Days_of_Code_Alura-Python-Pandas/blob/main/Dia_1-Importando_dados/Datasets/dados_emprestimos/emprestimos-20161.csv?raw=true')
dados_2016_2 = pd.read_csv('https://github.com/FranciscoFoz/7_Days_of_Code_Alura-Python-Pandas/blob/main/Dia_1-Importando_dados/Datasets/dados_emprestimos/emprestimos-20162.csv?raw=true')
dados_2017_1 = pd.read_csv('https://github.com/FranciscoFoz/7_Days_of_Code_Alura-Python-Pandas/blob/main/Dia_1-Importando_dados/Datasets/dados_emprestimos/emprestimos-20171.csv?raw=true')
dados_2017_2 = pd.read_csv('https://github.com/FranciscoFoz/7_Days_of_Code_Alura-Python-Pandas/blob/main/Dia_1-Importando_dados/Datasets/dados_emprestimos/emprestimos-20172.csv?raw=true')
dados_2018_1 = pd.read_csv('https://github.com/FranciscoFoz/7_Days_of_Code_Alura-Python-Pandas/blob/main/Dia_1-Importando_dados/Datasets/dados_emprestimos/emprestimos-20181.csv?raw=true')
dados_2018_2 = pd.read_csv('https://github.com/FranciscoFoz/7_Days_of_Code_Alura-Python-Pandas/blob/main/Dia_1-Importando_dados/Datasets/dados_emprestimos/emprestimos-20182.csv?raw=true')
dados_2019_1 = pd.read_csv('https://github.com/FranciscoFoz/7_Days_of_Code_Alura-Python-Pandas/blob/main/Dia_1-Importando_dados/Datasets/dados_emprestimos/emprestimos-20191.csv?raw=true')
dados_2019_2 = pd.read_csv('https://github.com/FranciscoFoz/7_Days_of_Code_Alura-Python-Pandas/blob/main/Dia_1-Importando_dados/Datasets/dados_emprestimos/emprestimos-20192.csv?raw=true')
dados_2020_1 = pd.read_csv('https://github.com/FranciscoFoz/7_Days_of_Code_Alura-Python-Pandas/blob/main/Dia_1-Importando_dados/Datasets/dados_emprestimos/emprestimos-20201.csv?raw=true')

#Concatenar os dataFrames
emprestimos_biblioteca = pd.concat([dados_2010_1,dados_2010_2,dados_2011_1,dados_2011_2,dados_2012_1,dados_2012_2,dados_2013_1,dados_2013_2,dados_2014_1,
                                    dados_2014_2,dados_2015_1,dados_2015_2,dados_2016_1,dados_2016_2,dados_2017_1,dados_2017_2,dados_2018_1,dados_2018_2,
                                    dados_2019_1,dados_2019_2,dados_2020_1],ignore_index=True)
emprestimos_biblioteca

emprestimos_biblioteca.info()

#verificar duplicatas
emprestimos_biblioteca.value_counts()

#Excluindo duplicatas
emprestimos_biblioteca = emprestimos_biblioteca.drop_duplicates()

emprestimos_biblioteca.value_counts()

emprestimos_biblioteca.head()

#Importando mais dados
dados_exemplares = pd.read_parquet('https://github.com/FranciscoFoz/7_Days_of_Code_Alura-Python-Pandas/raw/main/Dia_1-Importando_dados/Datasets/dados_exemplares.parquet')

dados_exemplares

"""Unindo os dataframes"""

emprestimos_completo = emprestimos_biblioteca.merge(dados_exemplares)
emprestimos_completo

emprestimos_completo.info()

emprestimos_completo.isnull().sum()

#Formatando as dadtas com o dateTime
emprestimos_completo['data_emprestimo'] = pd.to_datetime(emprestimos_completo['data_emprestimo'])

emprestimos_completo['data_renovacao'] = pd.to_datetime(emprestimos_completo['data_renovacao'])

emprestimos_completo['data_devolucao'] = pd.to_datetime(emprestimos_completo['data_devolucao'])

#Separando os emprestimos por ano
emprestimos_completo['ano'] = emprestimos_completo['data_emprestimo'].dt.year

emprestimos_por_ano = emprestimos_completo.groupby('ano').size()
print(emprestimos_por_ano)

#Grafico para mostra a evolução dos empréstimos no tempo
plt.figure(figsize=(10, 6))
plt.plot(emprestimos_por_ano.index, emprestimos_por_ano.values, marker='o')
plt.title('Quantidade de Empréstimos de Livros ao Longo dos Anos')
plt.xlabel('Ano')
plt.ylabel('Quantidade de Empréstimos')
plt.grid(True)
plt.show()

#Separando as devoluções por ano
emprestimos_completo['ano'] = emprestimos_completo['data_devolucao'].dt.year

emprestimos_por_ano = emprestimos_completo.groupby('ano').size()
print(emprestimos_por_ano)

#Gráfico para mostra a evolução das devoluções ao longo do tempo
plt.figure(figsize=(10, 6))
plt.plot(emprestimos_por_ano.index, emprestimos_por_ano.values, marker='o')
plt.title('Quantidade de Devoluções de Livros ao Longo dos Anos')
plt.xlabel('Ano')
plt.ylabel('Quantidade de Devoluções')
plt.grid(True)
plt.show()

#Separando as renovações por ano.
emprestimos_completo['ano'] = emprestimos_completo['data_renovacao'].dt.year

emprestimos_por_ano = emprestimos_completo.groupby('ano').size()
print(emprestimos_por_ano)

#Gráfico para mostra a renovação das devoluções ao longo do tempo
plt.figure(figsize=(10, 6))
plt.plot(emprestimos_por_ano.index, emprestimos_por_ano.values, marker='o')
plt.title('Quantidade de Renovação de Livros ao Longo dos Anos')
plt.xlabel('Ano')
plt.ylabel('Quantidade de Renovação')
plt.grid(True)
plt.show()

"""Agrupar e Contar Empréstimos por Biblioteca"""

emprestimos_completo['data_emprestimo'] = pd.to_datetime(emprestimos_completo['data_emprestimo'])

emprestimos_completo['biblioteca'] = emprestimos_completo['biblioteca'].astype(str)

emprestimo_por_biblioteca = emprestimos_completo.groupby('biblioteca').size().reset_index(name = 'quantidade')
emprestimo_por_biblioteca = emprestimo_por_biblioteca.sort_values(by='quantidade', ascending=False)

plt.figure(figsize=(12,8))
sns.barplot(x = 'quantidade', y = 'biblioteca', data = emprestimo_por_biblioteca)
plt.title('Quantidade de empréstimos por Biblioteca')
plt.xlabel('Quantidade de Empréstimo')
plt.ylabel('Biblioteca')
plt.show

#Contar os empréstimos por tema: Utilize a função value_counts para contar quantas vezes cada tema aparece.
temas_counts = emprestimos_completo['localizacao'].value_counts()

#Identificar os temas mais e menos emprestados:
# Temas mais emprestados
temas_mais_emprestados = temas_counts.head()
print("Temas mais emprestados:")
print(temas_mais_emprestados)

# Temas menos emprestados
temas_menos_emprestados = temas_counts.tail()
print("\nTemas menos emprestados:")
print(temas_menos_emprestados)

# Gráfico dos temas mais emprestados
temas_mais_emprestados.plot(kind='bar', title='Temas Mais Emprestados')
plt.xlabel('Tema')
plt.ylabel('Número de Empréstimos')
plt.show()

# Gráfico dos temas menos emprestados
temas_menos_emprestados.plot(kind='bar', title='Temas Menos Emprestados')
plt.xlabel('Tema')
plt.ylabel('Número de Empréstimos')
plt.show()

#entender e limpar os dados
emprestimos_completo['data_emprestimo'] = pd.to_datetime(emprestimos_completo['data_emprestimo'])
emprestimos_completo['colecao'] = emprestimos_completo['colecao'].astype(str)

#Relacionar tipo_vinculo_usuario com data_emprestimo
#Entender e limpar os dados.
emprestimos_completo['data_emprestimo'] = pd.to_datetime(emprestimos_completo["data_emprestimo"])
emprestimos_completo['tipo_vinculo_usuario'] = emprestimos_completo['tipo_vinculo_usuario'].astype(str)
#Analisar a relação entre as duas variáveis acima
emprestimos_completo['ano'] = emprestimos_completo['data_emprestimo'].dt.year
emprestimos_por_vinculo = emprestimos_completo.groupby(['ano', 'tipo_vinculo_usuario']).size().reset_index(name='quantidade')

plt.figure(figsize = (14, 8))
sns.lineplot(x ='ano', y='quantidade', hue='tipo_vinculo_usuario', data=emprestimos_por_vinculo, marker = 'o')
plt.title('Qauntidade de empréstimos por Tipo de Vinculo de usuario ao longo dos anos')
plt.xlabel('Ano')
plt.ylabel('Quantidade de empréstimo')
plt.legend(title = 'Tipo de vinculo do usuario')
plt.grid(True)
plt.show()

"""**AS PRIMEIRAS MANIPULAÇÕES**"""

#Atribuir a coluna com nomenclatura da CDU
CDU_Lista = []
for CDU in emprestimos_completo['localizacao']:
  if(CDU < 100):
    CDU_Lista.append('Generalidades. Ciência e conhecimento.')
  elif(CDU>=100 and CDU < 200):
    CDU_Lista.append('Filosofia')
  elif(CDU>=200 and CDU < 300):
    CDU_Lista.append('Religião')
  elif(CDU>=300 and CDU < 400):
    CDU_Lista.append('Ciências Sociais')
  elif(CDU>=400 and CDU < 500):
    CDU_Lista.append('Classe vaga')
  elif(CDU>=500 and CDU < 600):
    CDU_Lista.append('Matemática e ciências naturais')
  elif(CDU>=600 and CDU < 700):
    CDU_Lista.append('Ciências Aplicadas')
  elif(CDU>=700 and CDU < 800):
    CDU_Lista.append('Belas Artes')
  elif(CDU>=800 and CDU < 900):
    CDU_Lista.append('Linguagens')
  else:
    CDU_Lista.append('Geografia. Biologia. História')

emprestimos_completo['CDU_geral'] = CDU_Lista
emprestimos_completo.head()

emprestimos_completo.info()

#Contar os empréstimos por CDU:
temas_counts = emprestimos_completo['CDU_geral'].value_counts()

#Identificar os temas mais e menos emprestados:
# Temas mais emprestados
temas_mais_emprestados = temas_counts.head()
print("Temas mais emprestados:")
print(temas_mais_emprestados)

# Temas menos emprestados
temas_menos_emprestados = temas_counts.tail()
print("Temas menos emprestados:")
print(temas_menos_emprestados)

#Excluindo colunas: nesse caso optamos por excluir a coluna "registro_sistema"
emprestimos_completo.drop(columns=['registro_sistema'], inplace=True)

#Alterarndo o tipo de dado da coluna matricula de númerioco para uma string
emprestimos_completo['matricula_ou_siape'] = emprestimos_completo['matricula_ou_siape'].astype('string')

emprestimos_completo.head()

"""**Relação entre empréstimos e empréstimos de exemplares**"""

#Vou usar o ID dos empréstimos para verificar quantos foram realizados
emprestimos_completo['id_emprestimo'].value_counts()

#Agora identifico quantos empréstimos forma realizados no total - ainda retiro as duplicatas
emprestimos = len(emprestimos_completo['id_emprestimo'].drop_duplicates())
emprestimos

"""#**Os dados obtidos pelo código abaixo vão possibilitar:**


1.  ## Gerenciar a programação de férias dos colaboradores de acordo com os meses de menor demanda;

2.  ## Programar atividades que não sejam de atendimento ao usuário para períodos específicos de menor demanda.


"""

#crio trÊs novas colunas: 1 para data, 1 para hora e outra para mês e relaciono aos empréstimos.
emprestimos_completo['ano'] = emprestimos_completo['data_emprestimo'].dt.year
emprestimos_completo['hora'] = emprestimos_completo['data_emprestimo'].dt.hour
emprestimos_completo['mes'] = emprestimos_completo['data_emprestimo'].dt.month
emprestimos_completo

# Contar o número de empréstimos por ano
emprestimos_por_ano = emprestimos_completo.groupby('ano').size().reset_index()
emprestimos_por_ano

# Contar o número de empréstimos por hora
emprestimos_por_hora = emprestimos_completo.groupby('hora').size().reset_index()
emprestimos_por_hora

# Contar o número de empréstimos por mês
emprestimos_por_mes = emprestimos_completo.groupby('mes').size().reset_index()
emprestimos_por_mes

"""**As suspeitas não se confirmam - os 3 mêses que mais se tem emŕéstimos são, em ordem de quantidade emprestada: Março, Agosto e Fevereiro.**"""

emprestimos_por_ano = emprestimos_completo.groupby('ano').size().reset_index(name='contagem')
emprestimos_por_mes = emprestimos_completo.groupby('mes').size().reset_index(name='contagem')

sns.set(style="whitegrid")

# Gráfico de caixas para empréstimos por ano
plt.figure(figsize=(10, 8))
emprestimos_por_ano.plot(kind='bar', color=plt.cm.Paired(range(len(emprestimos_por_ano))))
plt.title('Número de Empréstimos por Ano')
plt.xlabel('Ano')
plt.ylabel('Número de Empréstimos')
plt.show()

#Gráfico de empréstimos por mês
# Definir uma lista de cores para cada mês (12 cores para 12 meses)
cores = ['#FF6347', '#4682B4', '#8A2BE2', '#5F9EA0', '#D2691E', '#FF7F50', '#6495ED', '#DC143C', '#00FFFF', '#00008B', '#B8860B', '#006400']
plt.figure(figsize=(13, 8))
emprestimos_por_mes.plot(kind='bar', stacked=True, color=cores)
plt.title('Número de Empréstimos por Mês')
plt.xlabel('Ano')
plt.ylabel('Número de Empréstimos')
plt.legend(title='Mês', bbox_to_anchor=(1.05, 1), loc='upper left')
plt.show()

""" tipo_vinculo_usuario        
 colecao
  biblioteca
  CDU_geral  
"""

emprestimos_completo['tipo_vinculo_usuario'].value_counts()
tipo_vinculo_usuario_maximo = emprestimos_completo['tipo_vinculo_usuario'].value_counts().idxmax()
tipo_vinculo_usuario_maior = emprestimos_completo['tipo_vinculo_usuario'].value_counts().max()
print(f"O Tipo de vinculo que mais utiliza as bibliotecas é: {tipo_vinculo_usuario_maximo} com {tipo_vinculo_usuario_maior}")

emprestimos_completo['colecao'].value_counts().reset_index()
colecao_mais_acessada = emprestimos_completo['colecao'].value_counts().idxmax()
qtde_colecao_mais_acessada = emprestimos_completo['colecao'].value_counts().max()
print(f"A coleção de obras mais acessada nas bibliotecas é: {colecao_mais_acessada} com {qtde_colecao_mais_acessada}")

emprestimos_completo['biblioteca'].value_counts().reset_index()
biblioteca_mais_empresta = emprestimos_completo['biblioteca'].value_counts().idxmax()
qtde_emprestimo_biblioteca = emprestimos_completo['biblioteca'].value_counts().max()
print(f"A {biblioteca_mais_empresta} é a que mais empresas acervos, com {qtde_emprestimo_biblioteca}")

emprestimos_completo['CDU_geral'].value_counts().reset_index()
CDU_maximo = emprestimos_completo['CDU_geral'].value_counts().idxmax()
qtde_CDU_maximo = emprestimos_completo['CDU_geral'].value_counts().max()
print(f"A CDU {CDU_maximo} é a mais acessada nas bibliotecas, com {qtde_CDU_maximo}")

#Função para auxiliar no processo de análise
def tabela_frequencia(variavel):
  dataframe = pd.DataFrame(emprestimos_completo[variavel].value_counts())
  dataframe.columns = ['quantidade']
  dataframe['percentual'] = round((dataframe.quantidade / dataframe.quantidade.sum())*100,1)

  return dataframe

#Filtrar por vinculo dos usuários da biblioteca
tabela_frequencia('tipo_vinculo_usuario')

#filtrar por bibliotecas
tabela_frequencia('biblioteca')

# Filtrar por coleção
tabela_frequencia('colecao')

# Filtrar por CDU
tabela_frequencia('CDU_geral')

emprestimos_completo.head()

alunos_graduacao = emprestimos_completo.query('tipo_vinculo_usuario == "ALUNO DE GRADUAÇÃO"')
alunos_graduacao.colecao.value_counts()

alunos_graduacao_acervo_circulante = alunos_graduacao.query('colecao == "Acervo Circulante"')
alunos_graduacao_acervo_circulante = pd.DataFrame(alunos_graduacao_acervo_circulante)
alunos_graduacao_acervo_circulante['data_emprestimo'] = pd.to_datetime(alunos_graduacao_acervo_circulante['data_emprestimo'])
alunos_graduacao_acervo_circulante['ano'] = alunos_graduacao_acervo_circulante['data_emprestimo'].dt.year
alunos_graduacao_acervo_circulante['mes'] = alunos_graduacao_acervo_circulante['data_emprestimo'].dt.month
alunos_graduacao_acervo_circulante = alunos_graduacao_acervo_circulante.loc[:,['ano','mes']]
alunos_graduacao_acervo_circulante = alunos_graduacao_acervo_circulante.value_counts().to_frame('quantidade').reset_index()
alunos_graduacao_acervo_circulante

def gera_box_plot(dataset,x,y,titulo,subtitulo):
  '''
  Esta função irá gerar um gráfico de boxplot.

  Dataset = conjunto de dados do gráfico
  x = valor do eixo x do gráfico
  y = valor do eixo y do gráfico
  título = título do gráfico
  subtitulo = subtitulo do texto
  '''

  sns.set_theme(style="darkgrid", palette='Blues',font_scale=1.3)
  plt.figure(figsize=(16,10))

  ax = sns.boxplot(y= y, x= x, data= dataset,color='#4171EF')
  ax.yaxis.set_major_formatter(ticker.FuncFormatter(lambda x, p: format(int(x), ',').replace(',','.')))


  plt.ylim(0,max(dataset[y])*1.1)                                               #Definir o limite do eixo y
  plt.xlabel(None)
  plt.ylabel(None)

  ax.set_title(titulo+"\n",size=20,loc='left',weight='bold')
  ax.text(s=subtitulo,x=-0.5,y=max(dataset[y])*1.11,fontsize=18, ha='left',color='gray')

gera_box_plot(alunos_graduacao_acervo_circulante,'ano','quantidade','Distribuição dos empréstimos mensais', 'Realizados pelos alunos de graduação no acervo circulante')

# Filtrar os dados entre 2015 e 2020
emprestimos_completo_filtrado = emprestimos_completo[(emprestimos_completo['data_emprestimo'] >= '2015-01-01') & (emprestimos_completo['data_emprestimo'] <= '2020-12-31')]

# Verificar o DataFrame filtrado
print(emprestimos_completo_filtrado.head())

#Tenho que instalar o open xl para manusear arquivos xlsx no Colab
!pip install openpyxl

#Faço o oupload dos arquivos necessários para trabalho
cadastro_alunos_antes_2010 = pd.read_excel('https://github.com/FranciscoFoz/7_Days_of_Code_Alura-Python-Pandas/raw/main/Dia_6-Novos_dados_novas_analises/Datasets/matricula_alunos.xlsx',
                                        sheet_name='Até 2010',skiprows=1)
emprestimos_completos_maior_2010 = pd.read_excel('matricula_alunos.xlsx')

#Vejo o que tem dentro das planilhas
cadastro_alunos_antes_2010.head()

emprestimos_completos_maior_2010

#Adequação dos nomes das matriculas
cadastro_alunos_antes_2010.columns = ['matricula_ou_siape','tipo_vinculo_usuario','curso']

#Adequação dos cabeçalhos das bases de dados
emprestimos_completos_maior_2010.columns = ['matricula_ou_siape','tipo_vinculo_usuario','curso']

# Unir os DataFrames usando uma chave comum
cadastro_usuarios_excel = pd.concat([cadastro_usuarios_antes_2010,emprestimos_completos_maior_2010],ignore_index=True)
cadastro_usuarios_excel.matricula_ou_siape = cadastro_usuarios_excel.matricula_ou_siape.astype('string')
cadastro_usuarios_excel

#Levantando informações sobre os empréstimos dos alunos de graduação de 2015 em diante
matricula_data_de_emprestimo = emprestimos_completo.query("tipo_vinculo_usuario == 'ALUNO DE GRADUAÇÃO'")
matricula_data_de_emprestimo = matricula_data_de_emprestimo.loc[:,['matricula_ou_siape','data_emprestimo']]
matricula_data_de_emprestimo = matricula_data_de_emprestimo.query('data_emprestimo > 2015')
matricula_data_de_emprestimo = matricula_data_de_emprestimo.reset_index(drop=True)
matricula_data_de_emprestimo

#Filtrando os cursos selecionados
cadastro_usuarios_cursos_selecionados = cadastro_usuarios_excel.query("curso == ['BIBLIOTECONOMIA','CIÊNCIAS SOCIAIS','COMUNICAÇÃO SOCIAL','DIREITO','FILOSOFIA','PEDAGOGIA']")
cadastro_usuarios_cursos_selecionados

#Unir DataFrames de cadastro de usuários com o de empréstimos
cadastro_usuarios_cursos_selecionados = matricula_data_de_emprestimo.merge(cadastro_usuarios_cursos_selecionados)
cadastro_usuarios_cursos_selecionados

#Tratando as datas.
cadastro_usuarios_cursos_selecionados.data_emprestimo = cadastro_usuarios_cursos_selecionados.data_emprestimo.dt.year

#identificando o quantitativo de emprestimos numa tabela de cabeçalho com 'Ano', 'Curso', 'Qtde_emprestimos'
emprestimos_cursos_selecionados = cadastro_usuarios_cursos_selecionados.iloc[:,[1,3]].value_counts().reset_index()
emprestimos_cursos_selecionados.columns = ['ANO','CURSO','QUANTIDADE_EMPRESTIMOS']
emprestimos_cursos_selecionados

#Gerando uma nova tabela com dados
#Índice: Cursos
#Colunas: Ano
#Valores: Quantidade de empréstimos
#Total: Acrescente uma linha e uma coluna de total a tabela

emprestimos_tipo_usuario_curso_pivot = emprestimos_cursos_selecionados.pivot_table(
        index = 'CURSO',
        columns = 'ANO',
        values = 'QUANTIDADE_EMPRESTIMOS',
        fill_value = '-',
        aggfunc= sum,
        margins = True,
        margins_name = 'TOTAL',
)
emprestimos_tipo_usuario_curso_pivot



